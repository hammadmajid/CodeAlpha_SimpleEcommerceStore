/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  description?: string;
  detailedDescription?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
    _key: string;
  }>;
  price: number;
  category: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  specifications?: Array<{
    name?: string;
    value?: string;
    _key: string;
  }>;
  variants?: Array<{
    name?: string;
    price?: number;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _key: string;
  }>;
  featured?: boolean;
  weight?: number;
  dimensions?: {
    length?: number;
    width?: number;
    height?: number;
  };
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Product | Category | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: lib/queries.ts
// Variable: PRODUCTS_QUERY
// Query: *[_type == "product"] | order(_createdAt desc) {  _id,  name,  slug,  description,  images,  price,  category->{    _id,    name,    slug  },  featured,  weight,  dimensions}
export type PRODUCTS_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: Slug;
  description: string | null;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
    _key: string;
  }> | null;
  price: number;
  category: {
    _id: string;
    name: string;
    slug: Slug;
  };
  featured: boolean | null;
  weight: number | null;
  dimensions: {
    length?: number;
    width?: number;
    height?: number;
  } | null;
}>;
// Variable: PRODUCT_BY_SLUG_QUERY
// Query: *[_type == "product" && slug.current == $slug][0] {  _id,  name,  slug,  description,  detailedDescription,  images,  price,  category->{    _id,    name,    slug  },  specifications,  variants,  featured,  weight,  dimensions}
export type PRODUCT_BY_SLUG_QUERYResult = {
  _id: string;
  name: string;
  slug: Slug;
  description: string | null;
  detailedDescription: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
    _key: string;
  }> | null;
  price: number;
  category: {
    _id: string;
    name: string;
    slug: Slug;
  };
  specifications: Array<{
    name?: string;
    value?: string;
    _key: string;
  }> | null;
  variants: Array<{
    name?: string;
    price?: number;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _key: string;
  }> | null;
  featured: boolean | null;
  weight: number | null;
  dimensions: {
    length?: number;
    width?: number;
    height?: number;
  } | null;
} | null;
// Variable: FEATURED_PRODUCTS_QUERY
// Query: *[_type == "product" && featured == true] | order(_createdAt desc) {  _id,  name,  slug,  description,  images,  price,  category->{    _id,    name,    slug  },  featured}
export type FEATURED_PRODUCTS_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: Slug;
  description: string | null;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
    _key: string;
  }> | null;
  price: number;
  category: {
    _id: string;
    name: string;
    slug: Slug;
  };
  featured: boolean | null;
}>;
// Variable: PRODUCTS_BY_SLUGS_QUERY
// Query: *[_type == "product" && slug.current in $slugs] {  _id,  name,  slug,  description,  images,  price,  variants}
export type PRODUCTS_BY_SLUGS_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: Slug;
  description: string | null;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
    _key: string;
  }> | null;
  price: number;
  variants: Array<{
    name?: string;
    price?: number;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _key: string;
  }> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@/sanity/lib/client" {
  interface SanityQueries {
    "*[_type == \"product\"] | order(_createdAt desc) {\n  _id,\n  name,\n  slug,\n  description,\n  images,\n  price,\n  category->{\n    _id,\n    name,\n    slug\n  },\n  featured,\n  weight,\n  dimensions\n}": PRODUCTS_QUERYResult;
    "*[_type == \"product\" && slug.current == $slug][0] {\n  _id,\n  name,\n  slug,\n  description,\n  detailedDescription,\n  images,\n  price,\n  category->{\n    _id,\n    name,\n    slug\n  },\n  specifications,\n  variants,\n  featured,\n  weight,\n  dimensions\n}": PRODUCT_BY_SLUG_QUERYResult;
    "*[_type == \"product\" && featured == true] | order(_createdAt desc) {\n  _id,\n  name,\n  slug,\n  description,\n  images,\n  price,\n  category->{\n    _id,\n    name,\n    slug\n  },\n  featured\n}": FEATURED_PRODUCTS_QUERYResult;
    "*[_type == \"product\" && slug.current in $slugs] {\n  _id,\n  name,\n  slug,\n  description,\n  images,\n  price,\n  variants\n}": PRODUCTS_BY_SLUGS_QUERYResult;
  }
}
